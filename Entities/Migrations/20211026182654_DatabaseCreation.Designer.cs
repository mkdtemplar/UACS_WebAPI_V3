// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20211026182654_DatabaseCreation")]
    partial class DatabaseCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Address Id");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AddressId");

                    b.HasIndex("StudentId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Entities.Models.Exam", b =>
                {
                    b.Property<int>("examId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Exam Id");

                    b.Property<decimal>("Credits")
                        .HasColumnType("decimal(4)")
                        .HasColumnName("Credits");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfessorName")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("examId");

                    b.HasIndex("StudentId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Property<int>("studentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("student Id");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime")
                        .HasColumnName("Date of Birth");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Enrollment Date");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("First Name");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("GPA");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Last Name");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentIndex")
                        .HasColumnType("char(4)")
                        .HasColumnName("Student Index");

                    b.HasKey("studentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Entities.Models.Transcript", b =>
                {
                    b.Property<int>("transcriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Transcript Id");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(4)")
                        .HasColumnName("Points");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("transcriptId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("transcriptId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("transcriptId1");

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Addresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Exam", b =>
                {
                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Exams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Transcript", b =>
                {
                    b.HasOne("Entities.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Transcripts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Transcript", null)
                        .WithMany("Transcripts")
                        .HasForeignKey("transcriptId1");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Exams");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("Entities.Models.Transcript", b =>
                {
                    b.Navigation("Transcripts");
                });
#pragma warning restore 612, 618
        }
    }
}
